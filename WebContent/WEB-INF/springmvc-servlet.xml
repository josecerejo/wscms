<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://springframework.org/schma/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
            http://www.springframework.org/schema/util 
            http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<!-- ①：在该配置文件中：只需要扫描所有带@Controller注解的类（其他注解类的扫描在applicationContext-*.xml中配置），以完成Bean创建和自动依赖注入的功能 
	    该 配置项不但启用了对类包进行扫描以实施注释驱动 Bean 定义的功能，同时还启用了注释驱动自动注入的功能
	    （即还隐式地在内部注册了 AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor），
	    因此当使用 <context:component-scan/> 后，就可以将 <context:annotation-config/> 移除了
	-->
	<!-- <context:annotation-config /> -->
	<context:component-scan base-package="com.mvc.controller" />

	<!-- spring的默认实现,不配置也一样 -->
	<bean id="handlerMapping" class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
		<property name="order" value="0" />
	</bean>

	<bean id="jacksonMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
	</bean>
	
	<bean id="hostUserArgumentResolver" class="com.mvc.resolver.HostUserArgumentResolver"/>
	
	<!-- ②：启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="customArgumentResolver" ref="hostUserArgumentResolver" />
		<property name="messageConverters">
			<list>
				<ref bean="jacksonMessageConverter" />
			</list>
		</property>
		<property name="webBindingInitializer">
	        <bean class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
	            <property name="validator" ref="validator" />
	        </bean>
	    </property>
	</bean>
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- ③：对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:prefix="/WEB-INF/jsp/" p:suffix=".jsp" />

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" /> <!-- 默认编码 (ISO-8859-1) -->
		<property name="maxInMemorySize" value="10240" /> <!-- 最大内存大小 (10240) -->
		<!-- <property name="uploadTempDir" value="/upload/" /> 上传后的目录名 (WebUtils#TEMP_DIR_CONTEXT_ATTRIBUTE) -->
		<property name="maxUploadSize" value="-1" /> <!-- 最大文件大小，-1为无限止(-1) -->
	</bean>

	<!-- 配置拦截器   -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/admin/**" />
			<bean class="com.mvc.interceptor.AuthorizeInterceptor" />
		</mvc:interceptor>
		<!-- <mvc:interceptor>
		<mvc:mapping path="/s/m/**" />
			<bean class="com.mvc.filter.ModelServiceFilter" />
		</mvc:interceptor>
		<mvc:interceptor>
		<mvc:mapping path="/**" />
			<bean class="com.mvc.interceptor.LogInterceptor" />
		</mvc:interceptor> -->
		<mvc:interceptor>
		<mvc:mapping path="/**" />
			<bean class="com.mvc.basemvc.interceptors.DefaultViewInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 由于Spring分发器拦截了所有的请求，静态资源就会获取不到了，所以以下配置帮你分类完成获取静态资源的责任  -->
	<mvc:resources location="/css/**" mapping="/css/**"/>
	<mvc:resources location="/images/**" mapping="/images/**"/>
	<mvc:resources location="/js/**" mapping="/js/**"/>

</beans>